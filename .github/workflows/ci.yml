name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  php-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.4"
          extensions: mbstring, intl, pdo_pgsql, zip, xml, ldap
          coverage: none

      - name: Cache Composer packages
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: |
          composer install --prefer-dist --no-progress
          composer require --dev "squizlabs/php_codesniffer"
          composer require --dev phpstan/phpstan

      - name: Run PHP_CodeSniffer
        run: vendor/bin/phpcs -v --standard=PSR12 --ignore=./src/Kernel.php ./src

      - name: Run PHPStan
        run: vendor/bin/phpstan analyse ./src # ./tests

  php-tests:
    runs-on: ubuntu-latest
    needs: php-lint

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_rest_user
          POSTGRES_PASSWORD: _ChangeMe_
          POSTGRES_DB: test_rest_db
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

      ldap:
        image: thoteam/slapd-server-mock
        ports:
          - 389:389

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: pdo_pgsql, bcmath, intl, mbstring, xdebug, zip, xml, ldap
          coverage: xdebug
          tools: phpunit:9.6
          ini-values: xdebug.mode=coverage,xdebug.coverage_enable=1,xdebug.start_with_request=yes

      - name: Cache Composer packages
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Generate JWT keys
        run: php bin/console lexik:jwt:generate-keypair --skip-if-exists

      - name: Create database
        env:
          DATABASE_URL: "postgresql://test_rest_user:_ChangeMe_@localhost:5432/test_rest_db?serverVersion=16&charset=utf8"
        run: |
          php bin/console doctrine:database:create --env=test --if-not-exists
          php bin/console doctrine:schema:create --env=test
          php bin/console doctrine:fixtures:load --purge-with-truncate --group=tests --env=test --no-interaction

      - name: Run tests with coverage
        env:
          DATABASE_URL: "postgresql://test_rest_user:_ChangeMe_@localhost:5432/test_rest_db?serverVersion=16&charset=utf8"
          LDAP_HOST: localhost
          LDAP_PORT: 389
          LDAP_ENCRYPTION: none
          LDAP_VERSION: 3
          LDAP_USER_KEY: uid
          LDAP_BASE_DN: "dc=ldapmock,dc=local"
          LDAP_BASE_SEARCH_DN: "ou=people,dc=ldapmock,dc=local"
          LDAP_USER_DN: "cn=admin,dc=ldapmock,dc=local"
          LDAP_USER_PASSWORD: adminpass
        run: |
          php bin/phpunit --coverage-text --coverage-filter src

  #      - name: Upload coverage reports to Codecov
  #        uses: codecov/codecov-action@v4
  #        with:
  #          file: ./coverage.xml
  #          fail_ci_if_error: false

  frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "yarn"
          cache-dependency-path: "front-src/yarn.lock"

      - name: Install dependencies
        run: |
          cd front-src
          yarn install

      - name: Build frontend
        run: |
          cd front-src
          yarn build

      - name: Archive production frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: public/build
